#!/usr/bin/env python

# Copyright (C) 2011 Genome Research Limited -- See full notice at end
# of module.

# Create a plot of ZMW status by x/y position on the SMRTcell. First
# parameter is input hdf5 file. Output png file is optional command
# line parameter, defaulting to XY.png.

# From Customer Portal FAQ, rearranged:

#   SMRT Cell Layout Dictionary
#   
#       0 SEQUENCING   - Standard sequencing ZMW
#       1 ANTIHOLES    - Missing ZMWs for cross-talk estimation; used for measuring backgrounds
#       2 FIDUCIAL     - Non standard ZMW - possibly larger than normal
#       3 SUSPECT      - No valid data generated by this ZMW                                   
#       4 ANTIMIRROR   - Missing (umirror+ZMW) for gridding
#       5 FDZMW        - Large ZMWs for in-movie tracking, Fluorescence Diffusion Zero Mode Waveguide
#       6 FBZMW        - (Unknown)
#       7 ANTIBEAMLETS - Location of missing beamlets in the DOE; No Laser hitting ZMW
#       8 OUTSIDEFOV   - Outside field of view
#       * Highland     - 'top' of the micromirror
#       * Lowland      - the bottom of the micromirror. High and low land are ~5um apart.

#   Attribute of TraceData.HoleStatus:

#        *  LookupTable = [SEQUENCING ANTIHOLE FIDUCIAL SUSPECT ANTIMIRROR FDZMW FBZMW ANTIBEAMLET OUTSIDEFOV]


import sys
import optparse
import h5py
from tt_log import logger

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

DEF_OUTPUT = 'XY.png'

def main ():

    logger.debug("%s starting" % sys.argv[0])

    opt, args = getParms()

    infile_name = args[0]
    infile = h5py.File (infile_name, 'r')

    colours = ('#aaaaaa', '#ff0000', '#00ff00', '#0000ff', '#ff0080', '#8000ff', '#80ff00', '#ff8000', '#ffff00')
    holeStatusTable = ('SEQUENCING', 'ANTIHOLE', 'FIDUCIAL', 'SUSPECT', \
                       'ANTIMIRROR', 'FDZMW', 'FBZMW', 'ANTIBEAMLET', 'OUTSIDEFOV')

    top = h5py.Group (infile, '/')

    ZMW = top["PulseData/BaseCalls/ZMW"]
    
    holeStatus = ZMW["HoleStatus"]
    holeXY     = ZMW["HoleXY"]

    for num in xrange(len(holeStatusTable)):

        whichHoles = holeStatus[:] == num
        HowMany = sum(whichHoles)
        logger.debug("%5d ZMWs %d  %s" % (HowMany, num, holeStatusTable[num]));
        if HowMany > 0:
            plt.scatter (holeXY[whichHoles,0], holeXY[whichHoles,1], \
                             s=1, c=colours[num], edgecolor='face', \
                             label="%d  %5d  %s" % (num, HowMany, holeStatusTable[num]))

    plt.axis    ('equal')
    plt.legend  (scatterpoints=3, prop={'size':8})
    plt.savefig (opt.output)

    infile.close()

    logger.debug("complete")

def getParms ():                       # use default input sys.argv[1:]

    parser = optparse.OptionParser(usage='%prog [options] <bas_file>')

    parser.add_option ('--output',            help='Output file name (def: %default)')

    parser.set_defaults (output=DEF_OUTPUT)

    opt, args = parser.parse_args()

    return opt, args

if __name__ == "__main__":
    main()

